# from telethon import TelegramClient, events
# import asyncio

# # –í–∞—à—ñ API_ID —ñ API_HASH
# API_ID = 21033220
# API_HASH = 'a15f244bc9d48bc70fa7e192fe6e47ec'

# # –°–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
# MONITORED_CHANNELS = [
#     -1001800023562,  # EdgEarningsüê©
#     -1001762006702,  # EdgEarnings premium
#     -1002071220835,  # C H A N E L ü¶é
#     -1001962975152,  # Lupo üíå
#     -1002191813151,  # SHELL
#     -1002185637554,  # Spark
#     -1002070685270,  # Blood
#     -1002318593261,  # –µ–∫–∑ –≤–º
#     -1001178398345,  # –º—ñ–π –∫–∞–Ω–∞–ª
# ]

# # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É (–≤—Å—ñ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏)
# KEYWORDS = [
#     "—Å–∫–æ—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è",
#     "–∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫–æ—à—Ç–∏",
#     "–ø–æ—Ç—Ä—ñ–±–Ω–æ",
#     "–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω—ñ–∫",
#     "–∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑",
#     "–æ–ø–ª–∞—Ç–∞",
#     "–∫–æ–ø",
#     "–≥—Ä–Ω",
# ]

# # –°–ø–∏—Å–æ–∫ ID –∞–±–æ username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤/–∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
# TARGET_CHATS = [
#     868558137,  # @andryy_99
#     123456789,  # @neksiix
# ]

# # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
# client = TelegramClient('monitoring_session', API_ID, API_HASH)

# # –û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
# async def main():
#     # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
#     print("–í—Ö—ñ–¥ —É Telegram...")
#     await client.start()

#     # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
#     me = await client.get_me()
#     print(f"–í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ {me.first_name} (@{me.username})")

#     # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
#     @client.on(events.NewMessage(chats=MONITORED_CHANNELS))
#     async def message_handler(event):
#         # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
#         message_text = event.message.message.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É

#         # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–¥–Ω–µ –∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
#         if any(keyword in message_text for keyword in KEYWORDS):
#             # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –≤ —Å–ø–∏—Å–∫—É TARGET_CHATS
#             for target_chat in TARGET_CHATS:
#                 forwarded_message = await event.forward_to(target_chat)
#                 print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {message_text} –¥–æ {target_chat}")

#                 # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—ñ–≤ –≥–æ–¥–∏–Ω–∏
#                 await asyncio.sleep(300)
#                 try:
#                     await client.delete_messages(target_chat, forwarded_message.id)
#                     print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ: {forwarded_message.id} –∑ {target_chat}")
#                 except Exception as e:
#                     print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ {target_chat}: {e}")

#     print("–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
#     await client.run_until_disconnected()

# # –ó–∞–ø—É—Å–∫ –∫–ª—ñ—î–Ω—Ç–∞
# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(main()) 





from telethon import TelegramClient, events
from flask import Flask

from datetime import datetime
from zoneinfo import ZoneInfo  # –¥–ª—è Python 3.9+

import asyncio
import threading
import os
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram API-–∫–ª—é—á—ñ
API_ID = 21033220
API_HASH = 'a15f244bc9d48bc70fa7e192fe6e47ec'
SESSION_NAME = 'main_account_session'

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
MONITORED_CHANNELS = [
    -1001800023562,  # EdgEarningsüê©
    -1001762006702,  # EdgEarnings premium
    # -1002071220835,  # C H A N E L ü¶é
    # -1001962975152,  # Lupo üíå
    -1002191813151,  # SHELL
    -1002185637554,  # Spark
    # -1002070685270,  # Blood
    -1002540770220,  # Velisse
    -1002318593261,  # –µ–∫–∑ –≤–º
    -1001178398345,  # –º—ñ–π –∫–∞–Ω–∞–ª
]

# –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
KEYWORDS = [
    "—Å–∫–æ—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è",
    "–∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫–æ—à—Ç–∏",
    "–ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏",
    "–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è",
    "–ø–æ—Ç—Ä—ñ–±–Ω–æ",
    "–ø–æ—Ç—Ä—ñ–±–Ω–∞",
    "–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω—ñ–∫",
    "–∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑",
    "–∑–∞–≤–¥–∞–Ω–Ω—è –æ", 
    "–ø—ñ–¥–ø–∏—Å–∫–∞",
    "–ª–∞–π–∫",
    "–∫–æ–º–µ–Ω—Ç–∞—Ä",
    "–æ–ø–ª–∞—Ç–∞",
    "–≤—ñ–¥–≥—É–∫",
    "–∫–æ–ø",
    "–≥—Ä–Ω",
]

# –û—Ç—Ä–∏–º—É–≤–∞—á—ñ (username –∞–±–æ ID)
TARGET_ACCOUNTS = [
    'andryy_99', 'dim_gtr', 'maxx_py', 'kentvr01', 'romixsi', 'k_valer1', 'karpatyu', 'karnazh01',
]  #'neksiix'

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –∫–ª—ñ—î–Ω—Ç–∞
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# Flask HTTP-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!", 200

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@client.on(events.NewMessage(chats=MONITORED_CHANNELS))
async def handle_new_message(event):
    # –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å
    current_hour = datetime.now(ZoneInfo("Europe/Kyiv")).hour
    if 4 <= current_hour < 11:
        logger.info("–ù—ñ—á–Ω–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π ‚Äì –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è")
        return

    message_text = event.message.message.lower()

    if any(keyword in message_text for keyword in KEYWORDS):
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {event.message.message}")
        for account_id in TARGET_ACCOUNTS:
            try:
                entity = await client.get_entity(account_id)  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç—ñ
                forwarded_message = await client.forward_messages(entity, event.message)
                logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –¥–æ {account_id}")

                asyncio.create_task(delete_message_after_delay(entity.id, forwarded_message.id, 600))
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—ñ –¥–æ {account_id}: {e}")


# –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
async def delete_message_after_delay(chat_id, message_id, delay):
    await asyncio.sleep(delay)
    try:
        await client.delete_messages(chat_id, message_id)
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤–∏–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")

# –ó–∞–ø—É—Å–∫ Telegram-–∫–ª—ñ—î–Ω—Ç–∞
async def main():
    await client.start()
    me = await client.get_me()
    logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫ {me.first_name} (@{me.username})")
    await client.run_until_disconnected()

# –ó–∞–ø—É—Å–∫ –∫–ª—ñ—î–Ω—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
def run_telegram_client():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(main())

# –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    threading.Thread(target=run_telegram_client, daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
